[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "adaptive-speculative-decoding"
dynamic = ["version"]
description = "Multi-stage adaptive inference pipeline for Large Language Models"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Adaptive SD Research Team", email = "research@adaptive-sd.ai"}
]
maintainers = [
    {name = "Adaptive SD Research Team", email = "research@adaptive-sd.ai"}
]
keywords = [
    "llm",
    "inference", 
    "optimization",
    "adaptive",
    "speculative-decoding",
    "machine-learning"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "torch>=2.5.0,<3.0.0",
    "transformers>=4.40.0,<5.0.0",
    "accelerate>=0.35.0",
    "vllm>=0.8.3",
    "bitsandbytes>=0.45.0",
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "pydantic>=2.9.0,<3.0.0",
    "pyyaml>=6.0",
    "omegaconf>=2.3.0",
    "hydra-core>=1.3.0",
    "numpy>=1.26.0,<2.0.0",
    "scipy>=1.14.0",
    "pandas>=2.2.0",
    "scikit-learn>=1.6.0",
    "lightgbm>=4.6.0",
    "evaluate>=0.4.0",
    "datasets>=3.0.0",
    "nltk>=3.9",
    "rouge-score>=0.1.2",
    "sacrebleu>=2.4.0",
    "bert-score>=0.3.13",
    "matplotlib>=3.9.0",
    "seaborn>=0.13.0",
    "plotly>=5.14.0",
    "wandb>=0.18.0",
    "tensorboard>=2.18.0",
    "tqdm>=4.66.0",
    "psutil>=5.9.0",
    "aiofiles>=23.0.0",
    "async-timeout>=4.0.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "typer>=0.12.0",
    "requests>=2.32.0",
    "aiohttp>=3.12.0",
    "httpx>=0.27.0",
    "typing-extensions>=4.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pylint>=2.17.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
    "jupyter>=1.0.0",
    "ipython>=8.0.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
]
research = [
    "datasets>=3.0.0",
    "evaluate>=0.4.0",
    "wandb>=0.18.0",
    "tensorboard>=2.18.0",
    "plotly>=5.14.0",
    "bokeh>=3.1.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    "ipywidgets>=8.0.0",
    "papermill>=2.4.0",
]
production = [
    "gunicorn>=21.0.0",
    "uvicorn[standard]>=0.32.0",
    "prometheus-client>=0.17.0",
    "sentry-sdk>=1.28.0",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "celery>=5.3.0",
]
all = [
    "adaptive-speculative-decoding[dev,research,production]"
]

[project.scripts]
adaptive-sd-server = "src.cli.server:main"
adaptive-sd-train = "src.cli.train:main"
adaptive-sd-evaluate = "src.cli.evaluate:main"
adaptive-sd-benchmark = "src.cli.benchmark:main"
adaptive-sd-config = "src.cli.config:main"

[project.urls]
Homepage = "https://github.com/sa2shun/adaptive-speculative-decoding"
Documentation = "https://adaptive-sd.readthedocs.io/"
Repository = "https://github.com/sa2shun/adaptive-speculative-decoding.git"
"Bug Reports" = "https://github.com/sa2shun/adaptive-speculative-decoding/issues"
"Research Paper" = "https://arxiv.org/abs/2024.adaptive-sd"

[tool.setuptools.dynamic]
version = {attr = "src.__version__"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt", "*.md"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "adaptive_sd"]
known_third_party = [
    "torch",
    "transformers", 
    "vllm",
    "fastapi",
    "pydantic",
    "numpy",
    "pandas",
    "matplotlib",
    "seaborn",
    "pytest",
    "wandb"
]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "vllm.*",
    "bitsandbytes.*",
    "transformers.*",
    "evaluate.*",
    "datasets.*",
    "bert_score.*",
    "rouge_score.*",
    "sacrebleu.*",
    "lightgbm.*",
    "wandb.*",
    "tensorboard.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks",
    "gpu: marks tests that require GPU",
    "model: marks tests that require model files"
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/setup.py",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod"
]

# Pylint configuration
[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-local-variables",
    "line-too-long",  # Handled by black
    "missing-docstring",
    "invalid-name"
]

[tool.pylint.format]
max-line-length = 88

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml yet)
# [tool.flake8] - not supported, see setup.cfg

# Bump2version configuration
[tool.bumpversion]
current_version = "2.0.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"

[[tool.bumpversion.files]]
filename = "src/__init__.py"
search = "__version__ = \"{current_version}\""
replace = "__version__ = \"{new_version}\""

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""